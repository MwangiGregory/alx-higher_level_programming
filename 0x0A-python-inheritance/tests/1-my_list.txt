How to use 1-my_list.py

This module defines a class MyList that inherits from list

Instantiation
>>> MyList = __import__('1-my_list').MyList

with no arguments
>>> my_list = MyList()
>>> print(my_list)
[]

with only one iterable argument
>>> my_list = MyList([1, 2, 3, 4])
>>> print(my_list)
[1, 2, 3, 4]

even a tuple (as long as the argument is an iterable)
>>> my_list = MyList((1, 2, 3, 4))
>>> print(my_list)
[1, 2, 3, 4]

Will raise an exception when more than one argument is passed
>>> my_list = MyList([1,2], [3,4])
Traceback (most recent call last):
TypeError: list expected at most 1 argument, got 2

>>> my_list = MyList(1)
Traceback (most recent call last):
TypeError: 'int' object is not iterable

MyList inherits from list and so all methods of list are viable
>>> my_list = MyList()
>>> my_list.append(9)
>>> my_list.append(7)
>>> my_list.append(6)
>>> print(my_list)
[9, 7, 6]
>>> my_list.remove(9)
>>> print(my_list)
[7, 6]

MyList defines one public method
>>> my_list = MyList()
>>> my_list.append(9)
>>> my_list.append(7)
>>> my_list.append(6)
>>> my_list.print_sorted()
[6, 7, 9]

print_sorted() does not take any arguments
>>> my_list.print_sorted(2)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given

The original list is not modified
>>> my_list = MyList([9, 8, 7])
>>> my_list.print_sorted()
[7, 8, 9]
>>> print(my_list)
[9, 8, 7]

>>> my_list = MyList([1, 2, -3, 4])
>>> my_list.print_sorted()
[-3, 1, 2, 4]

Nothing to sort
>>> my_list = MyList()
>>> my_list.print_sorted()
[]
